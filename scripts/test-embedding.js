#!/usr/bin/env node

/**
 * ÂêëÈáèÊ®°ÂûãÂèØÁî®ÊÄßÊµãËØïËÑöÊú¨
 * Áî®‰∫éÈ™åËØÅÂµåÂÖ•Ê®°ÂûãÈÖçÁΩÆÂíåËøûÊé•ÊÄß
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// ÊµãËØïÈÖçÁΩÆ
const TEST_CONFIGS = {
    'OpenAI': {
        provider: 'OpenAI',
        models: [
            'text-embedding-3-small',
            'text-embedding-3-large',
            'text-embedding-ada-002'
        ],
        requiredEnvs: ['OPENAI_API_KEY'],
        optionalEnvs: ['OPENAI_BASE_URL']
    },
    'Qwen': {
        provider: 'OpenAI', // Qwen‰ΩøÁî®OpenAIÂÖºÂÆπÊé•Âè£
        models: [
            'Qwen/Qwen3-Embedding-8B',
            'Qwen/Qwen3-Embedding-4B',
            'Qwen/Qwen3-Embedding-0.6B'
        ],
        requiredEnvs: ['OPENAI_API_KEY', 'OPENAI_BASE_URL'],
        optionalEnvs: []
    },
    'Azure OpenAI': {
        provider: 'AzureOpenAI',
        models: ['text-embedding-3-small-deployment'],
        requiredEnvs: ['AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_ENDPOINT'],
        optionalEnvs: ['AZURE_OPENAI_API_VERSION', 'AZURE_OPENAI_DEPLOYMENT_NAME']
    },
    'VoyageAI': {
        provider: 'VoyageAI',
        models: ['voyage-code-3', 'voyage-3-large'],
        requiredEnvs: ['VOYAGEAI_API_KEY'],
        optionalEnvs: []
    },
    'Gemini': {
        provider: 'Gemini',
        models: ['gemini-embedding-001'],
        requiredEnvs: ['GEMINI_API_KEY'],
        optionalEnvs: ['GEMINI_BASE_URL']
    },
    'Ollama': {
        provider: 'Ollama',
        models: ['nomic-embed-text', 'mxbai-embed-large'],
        requiredEnvs: [],
        optionalEnvs: ['OLLAMA_HOST', 'OLLAMA_MODEL']
    }
};

// ËØªÂèñÁéØÂ¢ÉÂèòÈáè
function loadEnvVars() {
    const envVars = { ...process.env };

    // Â∞ùËØïËØªÂèñ ~/.context/.env
    const homeDir = require('os').homedir();
    const contextEnvPath = path.join(homeDir, '.context', '.env');

    if (fs.existsSync(contextEnvPath)) {
        console.log(`üìã Loading environment from ${contextEnvPath}`);
        const envContent = fs.readFileSync(contextEnvPath, 'utf-8');
        const lines = envContent.split('\n');

        for (const line of lines) {
            const trimmed = line.trim();
            if (trimmed && !trimmed.startsWith('#') && trimmed.includes('=')) {
                const [key, ...valueParts] = trimmed.split('=');
                const value = valueParts.join('=');
                envVars[key.trim()] = value.trim();
            }
        }
    }

    return envVars;
}

// Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
function checkEnvConfig(providerName, config, envVars) {
    console.log(`\nüîç Ê£ÄÊü• ${providerName} ÈÖçÁΩÆ...`);

    const results = {
        provider: providerName,
        configured: true,
        missing: [],
        present: [],
        issues: []
    };

    // Ê£ÄÊü•ÂøÖÈúÄÁöÑÁéØÂ¢ÉÂèòÈáè
    for (const envVar of config.requiredEnvs) {
        if (envVars[envVar]) {
            results.present.push(`${envVar}=‚úÖ [ÈïøÂ∫¶: ${envVars[envVar].length}]`);
        } else {
            results.missing.push(envVar);
            results.configured = false;
        }
    }

    // Ê£ÄÊü•ÂèØÈÄâÁöÑÁéØÂ¢ÉÂèòÈáè
    for (const envVar of config.optionalEnvs) {
        if (envVars[envVar]) {
            results.present.push(`${envVar}=‚úÖ [${envVars[envVar]}]`);
        }
    }

    // ÁâπÊÆäÊ£ÄÊü•
    if (providerName === 'Qwen' && !envVars['OPENAI_BASE_URL']) {
        results.issues.push('QwenÊ®°ÂûãÈúÄË¶ÅËÆæÁΩÆOPENAI_BASE_URLÊåáÂêëÂÖºÂÆπÁöÑAPIÁ´ØÁÇπ');
    }

    if (providerName === 'Ollama') {
        const host = envVars['OLLAMA_HOST'] || 'http://127.0.0.1:11434';
        results.present.push(`OLLAMA_HOST=‚úÖ [${host}]`);
    }

    return results;
}

// ÊµãËØïÂµåÂÖ•Ê®°ÂûãËøûÊé•ÊÄß
async function testEmbeddingConnection(providerName, config, envVars) {
    console.log(`\nüß™ ÊµãËØï ${providerName} ËøûÊé•ÊÄß...`);

    const testResult = {
        provider: providerName,
        success: false,
        error: null,
        dimensions: {},
        latency: null
    };

    try {
        // Âä®ÊÄÅÂØºÂÖ•Ê†∏ÂøÉÊ®°Âùó
        const { Context } = await import('../packages/core/dist/context.js');
        const embeddingModules = {
            'OpenAI': await import('../packages/core/dist/embedding/openai-embedding.js'),
            'AzureOpenAI': await import('../packages/core/dist/embedding/azure-openai-embedding.js'),
            'VoyageAI': await import('../packages/core/dist/embedding/voyageai-embedding.js'),
            'Gemini': await import('../packages/core/dist/embedding/gemini-embedding.js'),
            'Ollama': await import('../packages/core/dist/embedding/ollama-embedding.js')
        };

        const EmbeddingClass = embeddingModules[config.provider];
        if (!EmbeddingClass) {
            throw new Error(`‰∏çÊîØÊåÅÁöÑÊèê‰æõÂïÜ: ${config.provider}`);
        }

        // ‰∏∫ÊØè‰∏™Ê®°ÂûãÊµãËØï
        for (const model of config.models.slice(0, 1)) { // Âè™ÊµãËØïÁ¨¨‰∏Ä‰∏™Ê®°Âûã
            console.log(`   ÊµãËØïÊ®°Âûã: ${model}`);

            const startTime = Date.now();

            // ÊûÑÂª∫ÈÖçÁΩÆÂØπË±°
            let embeddingConfig = {};

            if (config.provider === 'OpenAI') {
                embeddingConfig = {
                    model: model,
                    apiKey: envVars['OPENAI_API_KEY'],
                    ...(envVars['OPENAI_BASE_URL'] && { baseURL: envVars['OPENAI_BASE_URL'] })
                };
            } else if (config.provider === 'AzureOpenAI') {
                embeddingConfig = {
                    deploymentName: envVars['AZURE_OPENAI_DEPLOYMENT_NAME'] || model,
                    azureEndpoint: envVars['AZURE_OPENAI_ENDPOINT'],
                    apiKey: envVars['AZURE_OPENAI_API_KEY'],
                    apiVersion: envVars['AZURE_OPENAI_API_VERSION'] || '2024-02-01'
                };
            } else if (config.provider === 'VoyageAI') {
                embeddingConfig = {
                    model: model,
                    apiKey: envVars['VOYAGEAI_API_KEY']
                };
            } else if (config.provider === 'Gemini') {
                embeddingConfig = {
                    model: model,
                    apiKey: envVars['GEMINI_API_KEY'],
                    ...(envVars['GEMINI_BASE_URL'] && { baseURL: envVars['GEMINI_BASE_URL'] })
                };
            } else if (config.provider === 'Ollama') {
                embeddingConfig = {
                    model: model,
                    host: envVars['OLLAMA_HOST'] || 'http://127.0.0.1:11434'
                };
            }

            const embedding = new EmbeddingClass.default(embeddingConfig);

            // ÊµãËØïÁª¥Â∫¶Ê£ÄÊµã
            const dimension = await embedding.detectDimension('ÊµãËØïÊñáÊú¨');
            testResult.dimensions[model] = dimension;

            // ÊµãËØïÂÆûÈôÖÂµåÂÖ•
            const result = await embedding.embed('ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÊñáÊú¨ÔºåÁî®‰∫éÈ™åËØÅÂµåÂÖ•Ê®°ÂûãÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú„ÄÇ');

            const endTime = Date.now();
            testResult.latency = endTime - startTime;
            testResult.success = true;

            console.log(`   ‚úÖ Ê®°Âûã ${model} ÊµãËØïÊàêÂäü`);
            console.log(`   üìè ÂêëÈáèÁª¥Â∫¶: ${dimension}`);
            console.log(`   ‚è±Ô∏è  Âª∂Ëøü: ${testResult.latency}ms`);

            break; // Âè™ÊµãËØïÁ¨¨‰∏Ä‰∏™Ê®°Âûã
        }

    } catch (error) {
        testResult.error = error.message;
        console.log(`   ‚ùå ÊµãËØïÂ§±Ë¥•: ${error.message}`);
    }

    return testResult;
}

// ÁîüÊàêÊµãËØïÊä•Âëä
function generateReport(envResults, connectionResults) {
    const report = {
        timestamp: new Date().toISOString(),
        platform: process.platform,
        nodeVersion: process.version,
        summary: {
            totalProviders: envResults.length,
            configuredProviders: envResults.filter(r => r.configured).length,
            successfulConnections: connectionResults.filter(r => r.success).length
        },
        environmentCheck: envResults,
        connectionTest: connectionResults,
        recommendations: []
    };

    // ÁîüÊàêÂª∫ËÆÆ
    const unconfigured = envResults.filter(r => !r.configured);
    if (unconfigured.length > 0) {
        report.recommendations.push({
            type: 'configuration',
            message: `‰ª•‰∏ãÊèê‰æõÂïÜÈúÄË¶ÅÈÖçÁΩÆ: ${unconfigured.map(r => r.provider).join(', ')}`
        });
    }

    const failedConnections = connectionResults.filter(r => !r.success);
    if (failedConnections.length > 0) {
        report.recommendations.push({
            type: 'connection',
            message: `‰ª•‰∏ãÊèê‰æõÂïÜËøûÊé•Â§±Ë¥•: ${failedConnections.map(r => r.provider).join(', ')}`
        });
    }

    const successfulProviders = connectionResults.filter(r => r.success);
    if (successfulProviders.length > 0) {
        report.recommendations.push({
            type: 'success',
            message: `ÂèØÁî®ÁöÑÊèê‰æõÂïÜ: ${successfulProviders.map(r => r.provider).join(', ')}`
        });
    }

    return report;
}

// ‰∏ªÂáΩÊï∞
async function main() {
    console.log('üöÄ ÂêëÈáèÊ®°ÂûãÂèØÁî®ÊÄßÊµãËØï');
    console.log('========================');

    try {
        // 1. Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
        const envVars = loadEnvVars();
        console.log(`üîß Â∑≤Âä†ËΩΩ ${Object.keys(envVars).length} ‰∏™ÁéØÂ¢ÉÂèòÈáè`);

        // 2. Ê£ÄÊü•ÁéØÂ¢ÉÈÖçÁΩÆ
        console.log('\nüìã Á¨¨‰∏ÄÊ≠•: Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ');
        const envResults = [];

        for (const [providerName, config] of Object.entries(TEST_CONFIGS)) {
            const result = checkEnvConfig(providerName, config, envVars);
            envResults.push(result);

            if (result.configured) {
                console.log(`   ‚úÖ ${providerName}: Â∑≤ÈÖçÁΩÆ`);
                if (result.present.length > 0) {
                    result.present.forEach(item => console.log(`      ${item}`));
                }
            } else {
                console.log(`   ‚ùå ${providerName}: Áº∫Â∞ëÈÖçÁΩÆ`);
                result.missing.forEach(missing => console.log(`      Áº∫Â∞ë: ${missing}`));
            }

            if (result.issues.length > 0) {
                result.issues.forEach(issue => console.log(`      ‚ö†Ô∏è  ${issue}`));
            }
        }

        // 3. ÊµãËØïËøûÊé•ÊÄßÔºà‰ªÖÊµãËØïÂ∑≤ÈÖçÁΩÆÁöÑÊèê‰æõÂïÜÔºâ
        console.log('\nüîå Á¨¨‰∫åÊ≠•: ÊµãËØïËøûÊé•ÊÄß');
        const connectionResults = [];

        // È¶ñÂÖàÊûÑÂª∫È°πÁõÆ
        console.log('üì¶ ÊûÑÂª∫Ê†∏ÂøÉÂåÖ...');
        try {
            execSync('pnpm build:core', { stdio: 'inherit' });
        } catch (error) {
            console.error('‚ùå ÊûÑÂª∫Â§±Ë¥•ÔºåË∑≥ËøáËøûÊé•ÊµãËØï');
            return;
        }

        const configuredProviders = envResults.filter(r => r.configured);

        for (const envResult of configuredProviders) {
            const config = TEST_CONFIGS[envResult.provider];
            const testResult = await testEmbeddingConnection(envResult.provider, config, envVars);
            connectionResults.push(testResult);
        }

        // 4. ÁîüÊàêÊä•Âëä
        console.log('\nüìä Á¨¨‰∏âÊ≠•: ÁîüÊàêÊµãËØïÊä•Âëä');
        const report = generateReport(envResults, connectionResults);

        // ‰øùÂ≠òÊä•Âëä
        const reportPath = 'embedding-test-report.json';
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

        // ÊòæÁ§∫ÊëòË¶Å
        console.log('\nüéØ ÊµãËØïÊëòË¶Å:');
        console.log(`   ÊÄªÊèê‰æõÂïÜÊï∞: ${report.summary.totalProviders}`);
        console.log(`   Â∑≤ÈÖçÁΩÆÊèê‰æõÂïÜ: ${report.summary.configuredProviders}`);
        console.log(`   ÊàêÂäüËøûÊé•Êèê‰æõÂïÜ: ${report.summary.successfulConnections}`);
        console.log(`   Êä•ÂëäÂ∑≤‰øùÂ≠ò: ${reportPath}`);

        // ÊòæÁ§∫Âª∫ËÆÆ
        if (report.recommendations.length > 0) {
            console.log('\nüí° Âª∫ËÆÆ:');
            report.recommendations.forEach(rec => {
                const icon = rec.type === 'success' ? '‚úÖ' : rec.type === 'configuration' ? '‚öôÔ∏è' : 'üîß';
                console.log(`   ${icon} ${rec.message}`);
            });
        }

        // ÊàêÂäüÈÄÄÂá∫
        if (report.summary.successfulConnections > 0) {
            console.log('\nüéâ Ëá≥Â∞ëÊúâ‰∏Ä‰∏™Êèê‰æõÂïÜÂèØÁî®ÔºÅ');
            process.exit(0);
        } else {
            console.log('\n‚ö†Ô∏è  Ê≤°ÊúâÂèØÁî®ÁöÑÊèê‰æõÂïÜ');
            process.exit(1);
        }

    } catch (error) {
        console.error('‚ùå ÊµãËØïËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
        process.exit(1);
    }
}

// ÂëΩ‰ª§Ë°åÂèÇÊï∞Â§ÑÁêÜ
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
ÂêëÈáèÊ®°ÂûãÂèØÁî®ÊÄßÊµãËØïËÑöÊú¨

Áî®Ê≥ï: node scripts/test-embedding.js [ÈÄâÈ°π]

ÈÄâÈ°π:
  --help, -h     ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ

ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ:
  Â∞ÜÈÖçÁΩÆÊîæÂú® ~/.context/.env ÊàñÁ≥ªÁªüÁéØÂ¢ÉÂèòÈáè‰∏≠

ÊîØÊåÅÁöÑÊèê‰æõÂïÜ:
  - OpenAI: OPENAI_API_KEY, OPENAI_BASE_URL
  - Qwen: OPENAI_API_KEY, OPENAI_BASE_URL (‰ΩøÁî®OpenAIÂÖºÂÆπÊé•Âè£)
  - Azure OpenAI: AZURE_OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT
  - VoyageAI: VOYAGEAI_API_KEY
  - Gemini: GEMINI_API_KEY, GEMINI_BASE_URL
  - Ollama: OLLAMA_HOST, OLLAMA_MODEL

Á§∫‰æã:
  node scripts/test-embedding.js
    `);
    process.exit(0);
}

// ËøêË°å‰∏ªÁ®ãÂ∫è
if (require.main === module) {
    main();
}

module.exports = { main };